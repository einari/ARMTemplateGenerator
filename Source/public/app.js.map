{"version":3,"sources":["app.js"],"names":[],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AAEA,IAAI,WAAW,wBAAf;AACA,SAAS,SAAT,CAAmB,eAAnB,EAAoC,QAApC,EAA8C,oCAA9C;AACA,SAAS,SAAT,CAAmB,eAAnB,EAAoC,cAApC,EAAoD,kCAApD;AACA,SAAS,SAAT,CAAmB,gBAAnB,EAAqC,QAArC,EAA+C,sEAA/C;;;;AAIA,IAAI,oBAAoB,SAAS,QAAT,EAAxB;;AAEA,QAAQ,GAAR,CAAY,KAAK,SAAL,CAAe,iBAAf,CAAZ;;AAEA,IAAI,IAAJ,EAAU;;AAEV,YAAQ,GAAR,CAAY,MAAZ;;AAEA,QAAI,cAAc,wBAAlB;AACA,gBAAY,GAAZ,CAAgB,qBAAW,UAAX,CAAsB,EAAC,UAAU,KAAX,EAAtB,CAAhB;AACA,gBAAY,GAAZ,CAAgB,qBAAW,IAAX,EAAhB;AACA,gBAAY,GAAZ,CAAgB,4BAAhB;AACA,gBAAY,GAAZ,CAAgB,kBAAQ,MAAR,CAAe,YAAU,GAAzB,CAAhB;AACA,gBAAY,GAAZ,CAAgB,QAAQ,oBAAR,GAAhB;;AAEA,qBAAQ,UAAR,CAAmB,WAAnB;AACA,yCAAkB,UAAlB,CAA6B,WAA7B;;AAEA,QAAI,OAAO,QAAQ,GAAR,CAAY,IAAZ,IAAoB,IAA/B;;AAEA,YAAQ,GAAR,CAAY,4BAA0B,IAAtC;;AAEA,gBAAY,MAAZ,CAAmB,IAAnB,EAAyB,YAAM;AAC3B,gBAAQ,GAAR,CAAY,qBAAmB,IAA/B;AACH,KAFD;AAGC","file":"app.js","sourcesContent":["import express from \"express\";\nimport {Catalog} from \"./Catalog.server\";\nimport {TemplateGenerator} from \"./TemplateGenerator.server\";\nimport compression from \"compression\";\nimport bodyparser from \"body-parser\";\n\nimport {Template} from \"./Templates/Template\";\n\nlet template = new Template();\ntemplate.parameter(\"adminUsername\", \"string\", \"User name for the Virtual Machine.\");\ntemplate.parameter(\"adminPassword\", \"securestring\", \"Password for the Virtual Machine\");\ntemplate.parameter(\"dnsLabelPrefix\", \"string\", \"Unique DNS Name for the Public IP used to access the Virtual Machine\");\n\n//template.virtualMachine(vm => vm.fromGallery(\"Ubuntu\", \"15.10\"))\n\nlet generatedTemplate = template.generate();\n\nconsole.log(JSON.stringify(generatedTemplate));\n\nif( true) {\n\nconsole.log(\"MAIN\");\n\nvar application = express();\napplication.use(bodyparser.urlencoded({extended: false}));\napplication.use(bodyparser.json());\napplication.use(compression());\napplication.use(express.static(__dirname+\"/\"));\napplication.use(require(\"connect-livereload\")());\n\nCatalog.initialize(application);\nTemplateGenerator.initialize(application);\n\nvar port = process.env.PORT || 3000;\n\nconsole.log(\"Listen to traffic on : \"+port);\n\napplication.listen(port, () => {\n    console.log(\"Running on port \"+port);\n});\n}"],"sourceRoot":"../Source"}